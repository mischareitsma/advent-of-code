	#PACKAGE custom.aoc
	#CLASSDEF public extends = AoC

	// --------------------------------------------------------------------
	#PROPERTYDEF adapters = "" class = List private node = "day10Adapters"
	/* DOC ----------------------------------------------------------------
	List of adapters
	** ENDDOC */


	// --------------------------------------------------------------------
public static Integer pslmain(void args(String))
	/* DOC ----------------------------------------------------------------
	Command line entry point.

	@param	args	Command line arguments
	** ENDDOC */

	set args(1) = 10
	// set args("test") = ""
	set args("testSuffix") = 2

	return $$pslmain^AoC(args())


	// --------------------------------------------------------------------
public final void processInput()
	/* DOC ----------------------------------------------------------------
	Process the inputs.
	** ENDDOC */

	type Integer i

	set this.adapters = Class.new("List")

	for i = 1:1:this.getInputSize() {
		do this.adapters.add(+this.getInputLine(i), true, true)
	}

	quit


	// --------------------------------------------------------------------
public final String part1()
	/* DOC ----------------------------------------------------------------
	Solution part 1.
	** ENDDOC */

	type Integer i

	type void jumps(Integer)
	set jumps(1) = 0
	set jumps(2) = 0
	set jumps(3) = 1 // 1 for the final adapter to device

	set jumps(this.adapters.elementAt(1)) = 1

	for i = 1:1:this.adapters.count() - 1 {
		type Integer jump = this.adapters.elementAt(i + 1) - this.adapters.elementAt(i)
		set jumps(jump) = jumps(jump) + 1
	}

	return jumps(1) * jumps(3)


	// --------------------------------------------------------------------
public final String part2()
	/* DOC ----------------------------------------------------------------
	Solution part 2.
	** ENDDOC */

	type void arrangements(Integer)

	set arrangements(0) = 1

	type Integer i, j

	for i = 1:1:this.adapters.count() {
		type Integer value = this.adapters.elementAt(i)
		set arrangements(value) = 0
		for j = 1:1:3 {
			set arrangements(value) = arrangements(value) + arrangements(value-j).get(0)
		}
	}

	return arrangements(this.adapters.elementAt(this.adapters.count()))
